using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace PlagueEngine.Input.Components
{
    /****************************************************************************/
    /// Extended MouseMovement State
    /****************************************************************************/
    struct ExtendedMouseMovementState
    {

        /****************************************************************************/
        internal static DisplayMode Display = null;
        /****************************************************************************/


        /****************************************************************************/
        /// Constructor
        /****************************************************************************/
        public ExtendedMouseMovementState(int x,int y,int z,int oldX,int oldY,int oldZ) : this()
        {
            Moved = false;
            Scrolled = false;

            ScrollDifference = oldZ - z;

            Position = new Vector3(x, y, z);
            OldPosition = new Vector3(oldX, oldY, oldZ);

            Difference = Position - OldPosition;

            if (x!=oldX || y!=oldY)
            {
                Moved = true;
            }

            if (z != oldZ)
            {
                Scrolled = true;
            }

            Propagate = true;
        }
        /****************************************************************************/

        public bool Propagate { get; set; }

        /****************************************************************************/

        /// ScrollDifference
        /****************************************************************************/
        public float ScrollDifference { get; private set; }

        /****************************************************************************/

        /// Scrolled
        /****************************************************************************/
        public bool Scrolled { get; private set; }

        /****************************************************************************/


        /****************************************************************************/
        /// is on window
        /****************************************************************************/
        public bool IsOnWindow
        {
            get
            {
                return ((Position.X >= 0 && Position.Y >= 0) && Position.X <= Display.Width) && Position.Y <= Display.Height;
            }
        }
        /****************************************************************************/

        /// Position
        /****************************************************************************/
        public Vector3 Position { get; private set; }

        /****************************************************************************/

        /// OldPosition
        /****************************************************************************/
        public Vector3 OldPosition { get; private set; }

        /****************************************************************************/

        /// Difference
        /****************************************************************************/
        public Vector3 Difference { get; private set; }

        /****************************************************************************/

        /// Moved
        /****************************************************************************/
        public bool Moved { get; private set; }

        /****************************************************************************/


    }
    /****************************************************************************/


}
/****************************************************************************/
