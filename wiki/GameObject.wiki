#summary Opis korzystania i tworzenia obiektów gry.

= Obiekt gry _(GameObject)_ =
Obiektem gry jest każdy obiekt będący elementem levelu. Składa się z odpowiednio dobranych komponentów, w zależności od przeznaczenia obiektu. Każdy obiekt posiada unikalne id. 

Na pełen opis obiektu gry składają się:
 # [GameObjectComponent komponenty] stanowiące o funkcjonalności obiektu
 # hard-kodowana logika "zachowania" obiektu

Możemy wyszczególnić rodziny obiektów o wspólnych parametrach. Mówimy wtedy o definicji obiektu. 

[3Kroki Tworzenie własnego obiektu gry w trzech prostych krokach.]

----
== !GameObjectInstance : EventsSender, [IEventsReceiver], IDisposable ==
===_(namespace: [PlagueEngine].[LowLevelGameFlow])_===

Klasa, której obiekt reprezentuje pojedynczą unikalną instancję obiektu gry. Zawiera ID, nazwę definicji, z której obiekt korzysta, oraz macierz świata obiektu. Obiekty tej klasy są tworzone jedynie przy pomocy fabryki !GameObjectsFactory. Każda klasa obiektu gry dziedziczy po tej klasie. Co więcej klasa !GameObjectInstane jest abstrakcyjna.


=== Zawartość ===
==== Pola ====

 * `internal Matrix World;`
    Macierz świata obiektu. Przetrzymuje położenie, rotacje i skalę obiektu.

 * `private uint id = 0;` 
   Unikalny identyfikator obiektu.

 * `private String definition = String.Empty;`
   Nazwa definicji rodziny obiektów, do której należy dana instancja.

 * `private bool isDisposed = false;` 
   Flaga określająca czy obiekt został przeznaczony do usunięcia.

==== System przyznawania ID ===
Zasada działania opiera się o statyczne pola lastID i freeIDs. Za każdym razem gdy tworzony jest nowy obiekt, wartość lastID jest inkrementowana, a następnie przyznawana obiektowi jako jego ID. W przypadku gdy obiekt jest usuwany, jego ID jest dodawane do listy freeIDs. W momencie gdy dodajemy nowy obiekt i istnieje jakieś ID na liście, to zamiast inkrementować lastID, wyciągamy je z listy freeIDs.

 * `private static uint lastID = 0;`
   Ostatnie przyznane ID obiektu. Statyczne pole pomocnicze, pozwalające w łatwy sposób rozdawać unikalne ID kolejny obiektom.
 
 * `private static List<uint> freeIDs = new List<uint>();`
   Statyczna lista wolnych ID, mniejszych niż ostatnio przyznane ID.

 * `private static uint GenerateID()` 
   Generuje nowe ID, według opisanego wyżej schematu.

 * `private static bool PickID(uint id)`
   Pozwala na przyznanie danego przez nas ID bez naruszenia ogólnego schematu ich generowania. Zwraca informację o tym czy dane ID może zostać wykorzystane.

 * `private static void ReleaseID(uint id)`
   Zwalnia ID z puli zajętych.

==== Inicjalizator ====

 * `public bool Init(uint id,String definition)`
   Jeżeli parametr ID jest równy 0, to ID zostanie wygenerowane automatycznie. W przeciwnym razie nastąpi próba przyznania podanego ID. Jeżeli dane ID jest już w użyciu, metoda zwróci false. Drugi parametr jest nazwą definicji z jakiej korzysta obiekt. Obiekt nie musi korzystać z definicji.

==== Właściwości ====
 * `public uint ID`
   Zwraca ID obiektu.
 
 * `public String Definition`
   Zwraca nazwę definicji obiektu.

==== Zwracanie danych ====
 * `public virtual GameObjectInstanceData GetData()`
   Metoda zwracająca obiekt posiadająca dane wystarczające do odtworzenia obiektu.

 * `public void GetData(GameObjectInstanceData data)`
   Uzupełnia obiekt danymi potrzebnymi do odtworzenia obiektu. Do wykorzystania w pochodnych klasy !GameObjectInstance.

==== Usuwanie obiektu ====
 * `public abstract void ReleaseComponents();`
   Abstrakcyjna metoda, którą klasa pochodna powinna uzupełnić o metody zwalniające [GameObjectComponent komponenty] obiektu.

 * `public void Dispose()`
   Z interfejsu `IDisposable`, oznacza obiekt jako przeznaczony do usunięcia. Wywołuje `ReleaseID` i `ReleaseComponents`.
----
== !GameObjectInstanceData ==
=== _(namespace: [PlagueEngine].[LowLevelGameFlow])_ ===

Klasa zawierająca dane potrzebne do odtworzenia danego obiektu gry. Przeznaczona do binarnej serializacji. Każda klasa pochodna po !GameObjectInstance powinna również deklarować własną klasę dziedziczącą po !GameObejctInstanceData, uzupełnioną o specyficzne dla niej dane. 

----
== !GameObjectDefinition : IXmlSerializable ==
=== _(namespace: [PlagueEngine].[LowLevelGameFlow])_ ===

Jeżeli istnieje możliwość wyszczególnienia instancji obiektów gry danej klasy, posiadających wspólne wartości pewnych parametrów, to możemy stworzyć definicje obiektu gry przechowującą wartości tych parametrów. Do tego właśnie służy klasa !GameObjectDefinition. Zawiera ona nazwę definicji oraz słownik parametrów, na zasadzie: klucz - nawa parametru : wartość - wartość parametru. Gdzie wartość może być dowolnego typu, który oferuje serializacje xml. Definicje obiektów zapisywane są w postaci pliku xml. Nie ma potrzeby dziedziczenia po tej klasie. 

=== Zawartość ===
==== Pola ====
 * `public String Name = String.Empty;`
   Nazwa definicji.
 * `public Dictionary<String, object> Properties = new Dictionary<String, object>();`
   Słownik przechowujący właściwości definicji obiektu.

==== Metody z interfejsu IXmlSerializable ====
 * `public System.Xml.Schema.XmlSchema GetSchema()`
   Zgodnie z dokumentacją msdn, zwraca `null` xD.

 * `public void ReadXml(System.Xml.XmlReader reader)`
   Deserializuje obiekt.

 * `public void WriteXml(System.Xml.XmlWriter writer)`
   Serializuje obiekt.
----
== !GameObjectsFactory ==
===_(namespace: [PlagueEngine].[LowLevelGameFlow])_ ===
Fabryka obiektów gry. Jedna z najważniejszych klas. Podstawową funkcjonalnością jest tworzenie obiektów gry na podstawie podanego !GameObjectInstanceData. Zawiera referencje do fabryk komponentów, referencje do słownika z definicjami obiektów, oraz referencje do kontenera z obiektami gry, po to aby móc tworzyć obiekty posiadające odwołanie do innych obiektów.